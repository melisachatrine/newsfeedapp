apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs.kotlin'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.kanchanpal.newsfeed.testing.OpenClass'
}

android {
    compileSdkVersion 29

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.kanchanpal.newsfeed"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.kanchanpal.newsfeed.util.AppTestRunner"

        /** Replace with your api_token which you get from https://newsapi.org
         * For eg: Your api token is 58d482512a2e430fa414efe8c8747fc2
         * Following line should be replaced by following, including Backslash
         * buildConfigField 'String', 'API_DEVELOPER_TOKEN', "\"58d482512a2e430fa414efe8c8747fc2\""*/

        buildConfigField 'String', 'API_DEVELOPER_TOKEN', "\"d36c884a14de4f8fbc9a19807a45a6c3\""
    }
    buildTypes {

        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

jacoco {
    toolVersion = "$rootProject.jacocoVersion"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$rootProject.supportLibraryVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'



    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    debugImplementation "androidx.fragment:fragment-testing:$rootProject.fragmentVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.paging:paging-runtime:$rootProject.pagingVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.work:work-runtime-ktx:$rootProject.workVersion"
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"

    // Tools
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"
    implementation "com.facebook.stetho:stetho:$rootProject.stetho"
    implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.stetho"

    // Dagger
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    //noinspection OutdatedLibrary
    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"

    //pull to refresh
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.0'
    implementation 'com.scwang.smart:refresh-header-classics:2.0.0'
    implementation 'com.scwang.smart:refresh-header-material:2.0.0'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.19'

    // Networking
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp"

    // Testing-only dependencies
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.mockwebserverVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"

    //UI
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    androidTestImplementation "androidx.test:core:$rootProject.testCoreVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"

    androidTestImplementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    androidTestImplementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    androidTestImplementation "com.google.android.material:material:$rootProject.materialVersion"

    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"

    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoAndroidVersion"

    androidTestImplementation ('androidx.test.espresso:espresso-core:' + rootProject.espressoVersion) {
        exclude group:'com.androidx.support'

    }
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}
